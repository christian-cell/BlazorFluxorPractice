@page "/users"
@using BlazorFluxorPractice.States.Users
@using BlazorFluxorPractice.Models
@inject IState<UserState> UserState
@inject IDispatcher Dispatcher

<PageTitle>Users</PageTitle>

<h1>Users</h1>

<button class="btn btn-primary" @onclick="() => showNewUserPopup = true">New User</button>

@if (showNewUserPopup)
{
    <NewUser IsOpen="showNewUserPopup" OnClose="CloseNewUserPopup" />
}

@if (showEditUserPopup)
{
    <UserUpdateform IsOpen="showEditUserPopup" User="selectedUser" OnClose="CloseEditUserPopup" />
}

@if (UserState.Value.IsLoading)
{
    <p>Loading users...</p>  
}

@if (UserState.Value.IsLoading)
{
    <p>Loading users...</p>  
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Email</th>
                <th>Gender</th>
                <th>Status</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in UserState.Value.Users)
            {
                <tr>
                    <td>@user.UserId</td>
                    <td>@user.FirstName</td>
                    <td>@user.LastName</td>
                    <td>@user.Email</td>
                    <td>@user.Gender</td>
                    <td>@(user.Active ? "Active" : "Inactive")</td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => DeleteUser(user.UserId)">Delete</button> | 
                        <button class="btn btn-primary" @onclick="() => OpenEditUserPopup(user)">ðŸ–‰</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    
    bool showNewUserPopup = false;
    bool showEditUserPopup = false;
    User selectedUser = null;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        UserState.StateChanged += UserStateHasChanged!;
        
        if( UserState.Value.IsFirstLoading ) Dispatcher.Dispatch(new FetchUsersAction());
    }

    private void UserStateHasChanged(object sender, EventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    private void DeleteUser(int userId)
    {
        Dispatcher.Dispatch(new DeleteUserAction(userId));
    }
    
    void CloseNewUserPopup()
    {
        showNewUserPopup = false;
    }

    void OpenEditUserPopup(User user)
    {
        selectedUser = user;
        showEditUserPopup = true;
    }

    void CloseEditUserPopup()
    {
        showEditUserPopup = false;
    }
}